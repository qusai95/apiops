<policies>
	<inbound>
		<base />
		<rewrite-uri template="/websamples.countryinfo/CountryInfoService.wso" copy-unmatched-params="false" />
		<set-header name="SOAPAction" exists-action="override">
			<value>"ListOfCountryNamesGroupedByContinent"</value>
		</set-header>
		<set-body template="liquid">
			<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="http://www.oorsprong.org/websamples.countryinfo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
				<soap:Body>
					<ListOfCountryNamesGroupedByContinent>
					</ListOfCountryNamesGroupedByContinent>
				</soap:Body>
			</soap:Envelope>
		</set-body>
		<set-header name="Content-Type" exists-action="override">
			<value>text/xml</value>
		</set-header>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<choose>
			<when condition="@(context.Response.StatusCode < 400)">
				<set-body template="liquid">
        {
            "listOfCountryNamesGroupedByContinentResponse": 
            {
                "listOfCountryNamesGroupedByContinentResult": 
                [
                    {% JSONArrayFor item in body.envelope.body.ListOfCountryNamesGroupedByContinentResponse.ListOfCountryNamesGroupedByContinentResult -%}
                    {
                        "continent": 
                        {
                            "sCode": {% if item.Continent.sCode %}"{{item.Continent.sCode | Replace: '\r', '\r' | Replace: '\n', '\n' | Replace: '([^\\](\\\\)*)"', '$1\"'}}"{% else %} null {% endif %},
                            "sName": {% if item.Continent.sName %}"{{item.Continent.sName | Replace: '\r', '\r' | Replace: '\n', '\n' | Replace: '([^\\](\\\\)*)"', '$1\"'}}"{% else %} null {% endif %}
                        },
                        "countryCodeAndNames": 
                        [
                            {% JSONArrayFor item2 in item.CountryCodeAndNames -%}
                            {
                                "sISOCode": {% if item2.sISOCode %}"{{item2.sISOCode | Replace: '\r', '\r' | Replace: '\n', '\n' | Replace: '([^\\](\\\\)*)"', '$1\"'}}"{% else %} null {% endif %},
                                "sName": {% if item2.sName %}"{{item2.sName | Replace: '\r', '\r' | Replace: '\n', '\n' | Replace: '([^\\](\\\\)*)"', '$1\"'}}"{% else %} null {% endif %}
                            }
                            {% endJSONArrayFor -%}
                        ]
                    }
                    {% endJSONArrayFor -%}
                ]
            }
        }</set-body>
			</when>
			<otherwise>
				<set-variable name="old-body" value="@(context.Response.Body.As<string>(preserveContent: true))" />
				<!-- Error response as per https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#7102-error-condition-responses -->
				<set-body template="liquid">{
            "error": {
                "code": "{{body.envelope.body.fault.faultcode}}",
                "message": "{{body.envelope.body.fault.faultstring}}"
            }
        }</set-body>
				<choose>
					<when condition="@(string.IsNullOrEmpty(context.Response.Body.As<JObject>(preserveContent: true)["error"]["code"].ToString()) && string.IsNullOrEmpty(context.Response.Body.As<JObject>(preserveContent: true)["error"]["message"].ToString()))">
						<set-body>@{
                    var newResponseBody = new JObject();
                    newResponseBody["error"] = new JObject();
                    newResponseBody["error"]["code"] = "InvalidErrorResponseBody";
                    if (string.IsNullOrEmpty((string)context.Variables["old-body"]))
                    {
                        newResponseBody["error"]["message"] = "The error response body was not a valid SOAP error response. The response body was empty.";
                    }
                    else
                    {
                        newResponseBody["error"]["message"] = "The error response body was not a valid SOAP error response. The response body was: '" + context.Variables["old-body"] + "'.";
                    }
                    return newResponseBody.ToString();
                }</set-body>
					</when>
				</choose>
			</otherwise>
		</choose>
		<set-header name="Content-Type" exists-action="override">
			<value>application/json</value>
		</set-header>
	</outbound>
</policies>